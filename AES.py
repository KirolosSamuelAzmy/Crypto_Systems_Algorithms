#Author: Kirolos Samuel Azmy
#Date: 1-2-2021

########################################################################################################################
##################################### AES LOCK_UP TABLES ###############################################################
########################################################################################################################
s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)




def shift_rows(s):
    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]


def inv_shift_rows(s):
    s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]
    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
    s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]





r_con = (
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
)


########################################################################################################################
#################################### AES HELPER FUNCTIONS ##############################################################
########################################################################################################################

def add_round_key(s, k):
    for i in range(4):
        for j in range(4):
            s[i][j] ^= k[i][j]


def sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = s_box[s[i][j]]


def inv_sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = inv_s_box[s[i][j]]


xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)


def mix_single_column(a):
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)


def mix_columns(s):
    for i in range(4):
        mix_single_column(s[i])


def inv_mix_columns(s):
    for i in range(4):
        u = xtime(xtime(s[i][0] ^ s[i][2]))
        v = xtime(xtime(s[i][1] ^ s[i][3]))
        s[i][0] ^= u
        s[i][1] ^= v
        s[i][2] ^= u
        s[i][3] ^= v

    mix_columns(s)



def bytes_to_matrix(text):
    return [list(text[i:i+4]) for i in range(0, len(text), 4)]

def matrix_to_bytes(matrix):
    
    return bytes(sum(matrix, []))

def xor(byte_a, byte_b):
    
    return bytes(i^j for i, j in zip(byte_a, byte_b))

def text_modify(text):
    text_state = bytes_to_matrix(text)
    return text_state


########################################################################################################################
#################################### AES Main FUNCTIONS ################################################################
########################################################################################################################



def key_expansion(key):
    key = bytearray.fromhex(key)
    keys_columns_list=bytes_to_matrix(key)
    #since we used 128 bit so we have only 10 rounds
    no_rounds=10
    #44 here is tha max number of the column of the keys generated , 11 key generated each is 4 column == 44 column 
    max_column=44
    i=1
    while len(keys_columns_list) < max_column:
        word = list(keys_columns_list[-1])

        #check if it is first column of a new key generated or not
        if len(keys_columns_list) % 4 == 0:
            word.append(word.pop(0))
            word = [s_box[b] for b in word]
            word[0] ^= r_con[i]
            i += 1
        #if not 
        elif len(key) == 32 and len(keys_columns_list) % 4 == 4:
            word = [s_box[b] for b in word] 
        word = xor(word, keys_columns_list[-4])
        keys_columns_list.append(word)
    #now i will return the 11 round key i made each will be a list of 4 sublists , each sublist represent a column
    list_Keys_columns=[keys_columns_list[4*i : 4*(i+1)] for i in range(11)]
    return list_Keys_columns


        
def AES_encrypt(plain_text,key):
    list_Keys_columns=key_expansion(key)
    plain_text_state=text_modify(plain_text)

    #in first step we need only to add round key
    add_round_key(plain_text_state,list_Keys_columns[0])
    #in all another steps we need to make the 4 steps of subbytes,shift_rows,mix_columns and finally add_round_key
    for i in range(1,10):
        sub_bytes(plain_text_state)
        shift_rows(plain_text_state)
        mix_columns(plain_text_state)
        add_round_key(plain_text_state, list_Keys_columns[i])
    
    #in the last round(step) , we only make 3 steps which are sub_bytes, shift_rows & add_round_key
    sub_bytes(plain_text_state)
    shift_rows(plain_text_state)
    add_round_key(plain_text_state, list_Keys_columns[-1])

    return str(matrix_to_bytes(plain_text_state).hex()).upper()


def AES_decrypt(cipher_text,key):
    list_Keys_columns=key_expansion(key)
    cipher_text_state=text_modify(cipher_text)
    
    #inverse of encryption
    add_round_key(cipher_text_state, list_Keys_columns[-1])
    inv_shift_rows(cipher_text_state)
    inv_sub_bytes(cipher_text_state)

    for i in range(9,0,-1):
        add_round_key(cipher_text_state, list_Keys_columns[i])
        inv_mix_columns(cipher_text_state)
        inv_shift_rows(cipher_text_state)
        inv_sub_bytes(cipher_text_state)

    add_round_key(cipher_text_state, list_Keys_columns[0])

    return str(matrix_to_bytes(cipher_text_state).hex()).upper()
    
flag=1
while(flag==1):
    choice = int(input("For encyption just press 0 ONLY and for decryption press 1 : "))
    print("")
    if choice==0:
        key=input("Please Enter the Key in terms of 32 HEX character with NO SPACES : ")
        print("**************************************************************************************")
        #Taking the Plain_text , key & number of encryption from the user
        plain_text=bytearray.fromhex(input("Please Enter the plain text in terms of 32 HEX character with NO SPACES : "))
        print("**************************************************************************************")
        cipher_text=AES_encrypt(plain_text,key)
        print("Cipher Text: " + cipher_text)

    elif choice==1:
        key=input("Please Enter the Key in terms of 32 HEX character string with NO SPACES : ")
        #Taking the Plain_text , key & number of encryption from the user
        cipher_text=bytearray.fromhex(input("Please Enter the cipher text in terms of 32 HEX character string with NO SPACES : "))
        print("**************************************************************************************")
        plain_text=AES_decrypt(cipher_text,key)
        print("The Plain Text is: " + plain_text)
    
    print("###################################################################################################")
    print("###################################################################################################")
    print("1 - Continue using the program ")
    print("2 - Exit ")
    flag = int(input("Enter 1 to continue using it & 2 to exit the program "))


